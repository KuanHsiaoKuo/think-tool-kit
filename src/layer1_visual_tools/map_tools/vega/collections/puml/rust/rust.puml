@startmindmap
* Rust Programming Language
** 三大哲学
*** 内存安全
**** rust如何保证内存安全
**** Rust从Haskell的类型系统借鉴
**** Rust独有特性
*** 零成本抽象
*** 实用性
** 运行流程
** 内存管理
*** safe
**** 内存布局
***** 内存对齐
***** 字节对齐
**** 堆栈
***** 栈
****** 默认放在栈上
***** 堆
****** 堆数据结构
****** 堆内存
****** 堆分配
******* 链表
******* 位图
**** 分配与释放
***** 内存分配器
****** 系统分配器
****** 自定义分配器
******* jemalloc
******* tcmalloc
**** 所有权
***** 单一所有权
****** Copy/Move
****** 借用
******* 借用规则
******** 三条规则
******** 规则缺陷
******** MIR
******** NLL(非词法作用域)
******* 借用检查
******* 解引用获得所有权
****** 生命周期
******* 生命周期参数
******** 函数签名
******** 方法签名
******** 结构体/枚举体
******** 静态
******* 生命周期省略
******* trait对象生命周期
******* 泛型生命周期
****** 所有权规则
***** 共享所有权(Rc<T>和Weak<T>)
*** unsafe
**** 裸指针
**** 型变
**** Drop检查
**** FFI
**** WebAssembly
** 类型
*** 类型系统
**** 特点
***** 类型安全
****** 意义明确
****** 行为约束
***** 类型推导
***** 类型转换
****** 常用转换
******* From/Into Series
******** TryFrom/TryInto
******** FromStr/TryFromStr
******* as Series
******** AsRef/AsMut
******* Borrow/BorrowMut
******* Deref
****** Deref解引用
******* 解引用强制多态
******* 自动解引用
******** 方便开发者使用智能指针
******** 开发者可以定义行为
********* Deref/DerefMut
********** 内部实现
********** 应用场景
******** 手动解引用
********* Rc<T>
********* match
********** match x.deref()
********** match x.as_ref()
********** match x.borrow()
********** match &*x
********** match &x[..]
******* as 操作符
******** 常用场景
********* 无歧义完全限定语法
********* 父子类型相互转化
******* From/Into
******* TryFrom/TryInto
******* AsRef/AsMut
******* FromStr/TryFromStr
***** 类型别名
***** 类型标记
***** 类型大小
**** 多态
***** generic
***** trait bound
***** trait object
**** 核心
***** generic
****** 编译期自动实现代码
***** trait
****** 零成本抽象基石
******* 唯一接口抽象方式
******* 动静皆宜
******* 标签🏷️
****** 实现所有抽象\n运行时零开销
******* 接口抽象
******* OOP抽象
******* FP抽象
******* 泛型抽象
****** 行为约束
******* 接口约束
******** 最基础用法
******** 实现与重载
********* 关联类型
********* trait一致性
********* trait继承
******* 泛型约束
******** 又叫trait限定
******** 方法集合
******** 组合优于继承的体现
******** 单态化静态分发
******** where子句重构
******* 抽象类型
******** trait object
********* 动态分发
********* 组成
********** data指针
********** vtable指针
*********** 析构函数
*********** 大小
*********** 对齐
*********** 方法
********** 对象安全
*********** 类型参数self
*********** 使用规则
*********** 三点要求
******** impl trait
********* 静态分发
********* 拆箱抽象类型
********* 使用场景
********** 作为函数参数
********** 作为函数返回值
********** 作为结构体字段
********** 作为枚举体成员

******* 标签trait
*** 数据结构(数据类型)
**** 基本数据类型
***** 布尔
***** 数字
****** 类型前后缀
****** 字面量
******* 整数字面量
******** 十进制
******** 二进制
******** 八进制
******** 十六进制
******* 浮点数字面量
******** 十进制
******** 科学计数法
******** 十六进制
******** 八进制
******** 二进制
******* 字节字面量
****** 整数
******* 固定大小
******** 符号整数
********* i8
********* i16
********* i32
********* i64
********* i128
******** 无符号
********* u8
********* u16
********* u32
********* u64
********* u128
******* 动态大小
******** isize
******** usize
****** 浮点
******* f32
******* f64
***** 字符
***** 字符串
****** 特点
******* 本质是切片
******* 通常是不可变借用
****** 分类
******* str: 固定长度
******* String：可增长长度
****** 组成
******* 指针
******* 长度
****** 方法
******* as
******** as_bytes
******** as_bytes_mut
******** as_ptr
******** as_mut_ptr
******** as_str
******** as_mut_str
******** as_os_str
******** as_os_str_lossy
******** as_c_str
******** as_mut_c_str
******* len
******* is
******** is_empty
******** is_char_boundary
******* chars
******* char_indices
******* bytes
******* split
******** split_terminator
******** splitn
******** rsplit
******** rsplitn
******** split_whitespace
******** split_at
******** split_at_mut
******** split_off
******** split_to
******** split_to_mut
******* lines
******* lines_any
******* match
******** match_indices
******** rmatch_indices
******** match_indices_any
******** rmatch_indices_any
******* contain
******** contains
******** contains_char
******** starts_with
******** ends_with
******* find
******** find
******** rfind
******** find_str
******* slice
******** slice
******** slice_mut
******** slice_unchecked
******** slice_unchecked_mut
******* get
******** get
******** get_mut
******** get_unchecked
******** get_unchecked_mut
***** 指针
****** 指针、引用、借用
****** 分类
******* 引用（非空指针）
******* 裸指针(原生指针)
******* 函数指针
******* 智能指针
******** Reference(&T or &mut T)
******** Box<T>
******** LocalBox<T>
******** Rc<T>
******** Arc<T>
******** Cell<T>
******** RefCell<T>
******** Mutex<T>
******** RwLock<T>
******** Atomic<T>
******** Pin<T>
******** ManuallyDrop<T>
******** NonNull<T>
******** PhantomData<T>
******** UnsafeCell<T>
******** Unique<T>
******** Weak<T>
***** never
**** 集合容器
***** 线性序列
****** 数组
****** 切片
******* 本质上是一个指针
******* 是对数组的引用
****** 向量
****** 链表
****** 队列
***** 映射表
****** 哈希表
****** 树
***** 集合
****** HashSet
****** BTreeSet
***** 堆
****** BinaryHeap
**** 复合数据类型
***** 元组
***** 结构体
***** 枚举
***** 联合体
**** 错误处理
***** 分层处理
****** Option<T>
******* Some(T)
******* None
******* 高效处理
******** map
******** and_then
******** unwrap
******** expect
******** ...
****** Result<T, E>
******* Ok(T)
******* Err(E)
******* ?运算符
****** Panic
******* catch_wind
******* set_hook
****** Abort
** 控制流
*** 绑定
**** let变量
**** const常量
*** 运算符与表达式
*** 条件与循环
*** 模式匹配
**** match表达式
***** 所有分支必须返回同一个类型
***** 所有分支必须穷尽所有可能
***** 所有分支必须是不可变的
***** 一般会用"_"来匹配剩余的情况
***** 匹配模式
****** 单值：匹配单个值
****** 范围：1..3
****** 多值: |5|7|13
****** 通配符: _
****** 绑定: x @ 1..3\nx可以在右侧使用
**** if let表达式
**** while let表达式
** 模块化
*** 函数
**** 函数签名
***** 传入类型
***** 返回类型
**** 函数体
***** 花括号
***** 块表达式
***** return提前返回
***** 最后一行不加分号可返回
**** CTFE
***** 类似python的属性方法
***** miri
***** const fn
***** const trait fn
***** const generics
**** 函数指针
**** 函数重载
**** 函数式编程
***** 高阶函数
**** 闭包
***** 闭包特性
****** 函数调用
****** 捕获上下文环境的自由变量
******* 复制
******* 可变
******* 移动
****** 自动推断输入和返回的类型
****** 返回闭包需要move
******* 默认按引用捕获变量
******* 整个函数调用完毕后\n函数内的本地变量会被销毁
******* 使用move来转移所有权到闭包内，\n否则出现悬垂指针
***** 闭包示例
****** 闭包作为返回值
******* [[https://github.com/KuanHsiaoKuo/rust_lab/blob/ce6ea9db1fda392045518b400af5db5cbc9a9f62/rust_programming_dao/src/ch02_language_essentials/function.rs#L219 静态分发]]
******* [[https://github.com/KuanHsiaoKuo/rust_lab/blob/ce6ea9db1fda392045518b400af5db5cbc9a9f62/rust_programming_dao/src/ch02_language_essentials/function.rs#L187 动态分发]]
***** 闭包实现
****** 匿名结构体
******* 不占用堆内存，拥有更高性能
******* 无法实现trait
******* 使用内联技术优化
****** trait\n根据环境变量类型决定
******* Fn
******** 未捕获自动实现
******** 复制捕获自动实现
******* FnMut
******** 修改捕获自动实现
******* FnOnce
******** 移动捕获自动实现
****** 使用方式
******* 作为函数参数
******** trait bound
******** trait object
******* 作为函数返回值
******** impl FnOnce
******** impl FnMut
******** impl Fn
******** impl FnBox
*** 包管理
**** mod
**** crate
**** package
**** workspace
**** extern
**** use
**** pub
** 高级话题
*** 元编程
**** 反射
***** Any
***** is
**** 宏
***** 编译过程
***** 分类
****** 声明宏
****** 过程宏
*** 编程范式
**** 面向对象
**** 函数式
**** 响应式
**** 泛型编程
*** 设计模式
**** 委托和装饰器模式
**** 工厂模式
**** 单例模式
**** 适配器模式
**** 桥接模式
**** 组合模式
**** 装饰器模式
**** 外观模式
**** 享元模式
**** 代理模式
**** 责任链模式
**** 命令模式
**** 迭代器模式
**** 中介者模式
**** 备忘录模式
**** 观察者模式
**** 状态模式
**** 策略模式
**** 模板方法模式
**** 访问者模式
*** 代码组织
*** 异常处理
*** 并发异步
*** 混合编程
*** 网络开发
**** 网络协议
**** 网络模型
@endmindmap