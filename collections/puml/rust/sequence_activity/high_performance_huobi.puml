@startuml
| 数据获取层 |
start
:封装火币API为gRPC服务;
:定义RPC接口;
:使用火币API开发RESTful和WebSocket接口;
:编写gRPC服务的Proto文件;
:生成Rust代码包;
:实现gRPC接口中定义的RPC方法;
:使用火币API生成RESTful请求或WebSocket连接;
:打包请求到的数据并返回;
fork
 :编写gRPC客户端;
 :通过RPC方法获取到火币API服务的数据;
 :将获取到的数据存储到InfluxDB中;
 :将数据推送给指标计算层;
fork again
 :实现将获取到的数据存储到InfluxDB中的功能;
 :实现将获取到的数据推送给指标计算层的功能;
end fork
:使用gRPC客户端从火币API服务中获取数据;
:实时将获取到的数据存储到InfluxDB中;
:将数据推送给指标计算层;

| 流计算层 |

: 使用Flink的DataStream API;
fork
 :编写Flink的DataStream算子;
 :实现指标计算算法;
 :将每个品种的数据流进行分区;
 :将数据流通过算子进行指标计算;
end fork
: 根据指标计算结果和交易规则;
 :生成每个品种的买入/卖出信号;
 :将信号推送给执行层;
fork
 :  实现每个品种的交易规则;
 :将指标计算结果和交易规则应用到数据流上;
 :实现生成每个品种的买入/卖出信号;
 :将买入/卖出信号进行汇总;
end fork
:使用RabbitMQ等消息队列/S双向流模式进行数据推送;

| 执行层 |
:根据收到的买入/卖出信号执行交易操作;
fork
 :实现执行交易操作的功能;
 :向火币API服务提交订单、撤销订单、查询成交订单等;
 :实现交易数据的持久化存储功能;
 :将交易操作的结果存储到Redis或数据库中;
end fork
:如果需要将交易数据持久化存储，可以使用Redis;


| API层 |
:定义基于gRPC的API接口;
:使用Rust中提供的gRPC库，定义查询指标、获取信号、执行交易等API接口;
:实现处理查询指标、获取信号、执行交易等请求的功能;
:将gRPC方法的请求和响应命令与其他各层之间的数据传递协议进行转化;
@enduml