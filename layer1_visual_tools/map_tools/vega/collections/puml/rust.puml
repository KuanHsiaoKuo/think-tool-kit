@startmindmap
* Rust Programming Language
** 三大哲学
*** 内存安全
*** 零成本抽象
*** 实用性
** 运行流程
** 内存管理
*** safe
**** 内存布局
***** 内存对齐
***** 字节对齐
**** 堆栈
***** 栈
****** 默认放在栈上
***** 堆
****** 堆数据结构
****** 堆内存
****** 堆分配
******* 链表
******* 位图
**** 分配与释放
***** 内存分配器
****** 系统分配器
****** 自定义分配器
******* jemalloc
******* tcmalloc
**** 所有权
***** 单一所有权
****** Copy/Move
****** 借用
******* 借用规则
******** 三条规则
******** 规则缺陷
******** MIR
******** NLL(非词法作用域)
******* 借用检查
******* 解引用获得所有权
****** 生命周期
******* 生命周期参数
******** 函数签名
******** 方法签名
******** 结构体/枚举体
******** 静态
******* 生命周期省略
******* trait对象生命周期
******* 泛型生命周期
****** 所有权规则
***** 共享所有权(Rc<T>和Weak<T>)
*** unsafe
** 类型
*** 类型系统
**** 特点
***** 类型安全
***** 类型推导
***** 类型转换
****** From/Into Series
******* TryFrom/TryInto
******* FromStr/TryFromStr
****** as Series
******* AsRef/AsMut
****** Borrow/BorrowMut
****** Deref

***** 类型别名
***** 类型标记
***** 类型大小
**** 多态
***** generic
***** trait bound
***** trait object
*** 数据结构(数据类型)
**** 基本数据类型
***** 布尔
***** 整数
***** 浮点
***** 字符
***** 字符串
**** 复合数据类型
***** 元组
***** 结构体
***** 枚举
***** 联合体
**** 指针
***** 指针、引用、借用
***** 裸指针
***** 智能指针
****** Reference(&T or &mut T)
****** Box<T>
****** LocalBox<T>
****** Rc<T>
****** Arc<T>
****** Cell<T>
****** RefCell<T>
****** Mutex<T>
****** RwLock<T>
****** Atomic<T>
****** Pin<T>
****** ManuallyDrop<T>
****** NonNull<T>
****** PhantomData<T>
****** UnsafeCell<T>
****** Unique<T>
****** Weak<T>
**** 集合容器
***** 线性序列
***** 映射表
***** 集合
***** 堆
**** 错误处理
** 控制流
*** 绑定
**** let变量
**** const常量
*** 运算符与表达式
*** 条件与循环
*** 匹配
** 模块化
*** 函数
**** 闭包
*** crate
*** workspace
** 高级话题
*** 宏编程
*** 编程范式
**** 面向对象
**** 函数式
**** 响应式
**** 泛型编程
**** 元编程
*** 设计模式
**** 委托和装饰器模式
**** 工厂模式
**** 单例模式
**** 适配器模式
**** 桥接模式
**** 组合模式
**** 装饰器模式
**** 外观模式
**** 享元模式
**** 代理模式
**** 责任链模式
**** 命令模式
**** 迭代器模式
**** 中介者模式
**** 备忘录模式
**** 观察者模式
**** 状态模式
**** 策略模式
**** 模板方法模式
**** 访问者模式
*** 代码组织
*** 异常处理
*** 并发异步
*** 混合编程
*** 网络开发
**** 网络协议
**** 网络模型
@endmindmap